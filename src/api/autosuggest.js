import { slugify, getLocale } from "../js/utils"

// this is a cache that contains all previously entered autosuggest name / value pairs
const autocompleteData = {}
const autosuggestCache = {}

export default async (prefix, filter = false) => {
  // load data that was previously generated by 11ty SSG
  if (!autocompleteData[getLocale()]) {
    const resp = await fetch(`/autocomplete-${getLocale()}.json`, { method: "GET" })
    autocompleteData[getLocale()] = await resp.json()
  }

  // check autosuggest cache
  if (autosuggestCache[prefix]) {
    return autosuggestCache[prefix]
  }

  let filterArray
  if (filter) filterArray = filter.split(",")

  let res = []

  // filter items
  Object.keys(autocompleteData[getLocale()]).forEach(key => {
    if (!filter || filter.length === 0 || (filterArray && filterArray.indexOf(key) > -1)) {
      const items = autocompleteData[getLocale()][key].filter(value => {
        // in case if the value is a string check matches one level depper as well
        if (Array.isArray(value)) {
          if (value.find(subvalue => slugify(subvalue).indexOf(slugify(prefix)) === 0)) return true
          return false
        }

        if (slugify(value).indexOf(slugify(prefix)) === 0) return true
        return false
      })

      // flattening down the results (filtered items can be a list of strings or arrays with list of strings)
      res = res.concat(items.toString().split(","))
    }
  })

  // sort filtered result
  const resSorted = res.sort((a, b) => {
    return a.localeCompare(b, "hu", { ignorePunctuation: false })
  })

  // remove duplicates
  const filterDuplicates = keywords => keywords.filter((v, i) => keywords.indexOf(v) === i)
  const resFiltered = filterDuplicates(resSorted)
  // resFiltered.length = resFiltered.length > 10 ? limit : resFiltered.length

  // save the filtered result to cache
  autosuggestCache[prefix] = resFiltered

  return resFiltered
}
