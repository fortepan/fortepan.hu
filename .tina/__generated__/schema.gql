# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  photo_uploads(relativePath: String): Photo_uploads!
  photo_uploadsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Photo_uploadsFilter): Photo_uploadsConnection!
  hetifortepan(relativePath: String): Hetifortepan!
  hetifortepanConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HetifortepanFilter): HetifortepanConnection!
  notifications(relativePath: String): Notifications!
  notificationsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NotificationsFilter): NotificationsConnection!
  pages_hu(relativePath: String): Pages_hu!
  pages_huConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Pages_huFilter): Pages_huConnection!
  pages_en(relativePath: String): Pages_en!
  pages_enConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Pages_enFilter): Pages_enConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  photo_uploads: Photo_uploadsFilter
  hetifortepan: HetifortepanFilter
  notifications: NotificationsFilter
  pages_hu: Pages_huFilter
  pages_en: Pages_enFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Photo_uploads | Hetifortepan | Notifications | Pages_huProjects | Pages_huArticle | Pages_huHome | Pages_huDefault | Pages_enProjects | Pages_enArticle | Pages_enHome | Pages_enDefault | Settings

type Photo_uploadsUploadsHuActions {
  best_of: String
  all: String
}

type Photo_uploadsUploadsHu {
  title: String
  blurb: String
  actions: Photo_uploadsUploadsHuActions
}

type Photo_uploadsUploadsEnActions {
  best_of: String
  all: String
}

type Photo_uploadsUploadsEn {
  title: String
  blurb: String
  actions: Photo_uploadsUploadsEnActions
}

type Photo_uploadsUploads {
  name: String
  date: String
  cover_image: String
  hu: Photo_uploadsUploadsHu
  en: Photo_uploadsUploadsEn
}

type Photo_uploads implements Node & Document {
  uploads: [Photo_uploadsUploads]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input Photo_uploadsUploadsHuActionsFilter {
  best_of: StringFilter
  all: StringFilter
}

input Photo_uploadsUploadsHuFilter {
  title: StringFilter
  blurb: StringFilter
  actions: Photo_uploadsUploadsHuActionsFilter
}

input Photo_uploadsUploadsEnActionsFilter {
  best_of: StringFilter
  all: StringFilter
}

input Photo_uploadsUploadsEnFilter {
  title: StringFilter
  blurb: StringFilter
  actions: Photo_uploadsUploadsEnActionsFilter
}

input Photo_uploadsUploadsFilter {
  name: StringFilter
  date: DatetimeFilter
  cover_image: StringFilter
  hu: Photo_uploadsUploadsHuFilter
  en: Photo_uploadsUploadsEnFilter
}

input Photo_uploadsFilter {
  uploads: Photo_uploadsUploadsFilter
}

type Photo_uploadsConnectionEdges {
  cursor: String!
  node: Photo_uploads
}

type Photo_uploadsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Photo_uploadsConnectionEdges]
}

type HetifortepanHu {
  date: String
  cover_image: String
  title: String
  excerpt: String
  url: String
}

type HetifortepanEn {
  date: String
  cover_image: String
  title: String
  excerpt: String
  url: String
}

type Hetifortepan implements Node & Document {
  hu: [HetifortepanHu]
  en: [HetifortepanEn]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HetifortepanHuFilter {
  date: DatetimeFilter
  cover_image: StringFilter
  title: StringFilter
  excerpt: StringFilter
  url: StringFilter
}

input HetifortepanEnFilter {
  date: DatetimeFilter
  cover_image: StringFilter
  title: StringFilter
  excerpt: StringFilter
  url: StringFilter
}

input HetifortepanFilter {
  hu: HetifortepanHuFilter
  en: HetifortepanEnFilter
}

type HetifortepanConnectionEdges {
  cursor: String!
  node: Hetifortepan
}

type HetifortepanConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HetifortepanConnectionEdges]
}

type NotificationsNotifications {
  lang: String
  date: String
  title: String
  message: JSON
}

type Notifications implements Node & Document {
  notifications: [NotificationsNotifications]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input NotificationsNotificationsFilter {
  lang: StringFilter
  date: DatetimeFilter
  title: StringFilter
  message: RichTextFilter
}

input NotificationsFilter {
  notifications: NotificationsNotificationsFilter
}

type NotificationsConnectionEdges {
  cursor: String!
  node: Notifications
}

type NotificationsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NotificationsConnectionEdges]
}

type Pages_huProjectsProjects {
  title: String
  project_date: String
  description: String
  funding_info: String
  funding_logo: String
}

type Pages_huProjects implements Node & Document {
  title: String
  body: JSON
  projects: [Pages_huProjectsProjects]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type Pages_huArticle implements Node & Document {
  title: String
  permalink: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type Pages_enHomeBest_of_collectionsContent {
  title: String
  counter: Float
  cover_image: String
  url: String
}

type Pages_huHomeBest_of_collections {
  title: String
  caption: String
  content: [Pages_enHomeBest_of_collectionsContent]
}

type Pages_enHomeBlogAction {
  label: String
  url: String
}

type Pages_huHomeBlog {
  title: String
  caption: String
  action: Pages_enHomeBlogAction
}

type Pages_enHomeLatestAction {
  label: String
  url: String
}

type Pages_huHomeLatest {
  title: String
  caption: String
  action: Pages_enHomeLatestAction
}

type Pages_huHome implements Node & Document {
  title: String
  body: JSON
  best_of_collections: Pages_huHomeBest_of_collections
  blog: Pages_huHomeBlog
  latest: Pages_huHomeLatest
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type Pages_huDefault implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Pages_hu = Pages_huProjects | Pages_huArticle | Pages_huHome | Pages_huDefault

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input Pages_huProjectsProjectsFilter {
  title: StringFilter
  project_date: StringFilter
  description: StringFilter
  funding_info: StringFilter
  funding_logo: ImageFilter
}

input Pages_huProjectsFilter {
  title: StringFilter
  body: RichTextFilter
  projects: Pages_huProjectsProjectsFilter
}

input Pages_huArticleFilter {
  title: StringFilter
  permalink: StringFilter
  body: RichTextFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input Pages_enHomeBest_of_collectionsContentFilter {
  title: StringFilter
  counter: NumberFilter
  cover_image: StringFilter
  url: StringFilter
}

input Pages_huHomeBest_of_collectionsFilter {
  title: StringFilter
  caption: StringFilter
  content: Pages_enHomeBest_of_collectionsContentFilter
}

input Pages_enHomeBlogActionFilter {
  label: StringFilter
  url: StringFilter
}

input Pages_huHomeBlogFilter {
  title: StringFilter
  caption: StringFilter
  action: Pages_enHomeBlogActionFilter
}

input Pages_enHomeLatestActionFilter {
  label: StringFilter
  url: StringFilter
}

input Pages_huHomeLatestFilter {
  title: StringFilter
  caption: StringFilter
  action: Pages_enHomeLatestActionFilter
}

input Pages_huHomeFilter {
  title: StringFilter
  body: RichTextFilter
  best_of_collections: Pages_huHomeBest_of_collectionsFilter
  blog: Pages_huHomeBlogFilter
  latest: Pages_huHomeLatestFilter
}

input Pages_huDefaultFilter {
  title: StringFilter
}

input Pages_huFilter {
  projects: Pages_huProjectsFilter
  article: Pages_huArticleFilter
  home: Pages_huHomeFilter
  default: Pages_huDefaultFilter
}

type Pages_huConnectionEdges {
  cursor: String!
  node: Pages_hu
}

type Pages_huConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Pages_huConnectionEdges]
}

type Pages_enProjectsProjects {
  title: String
  project_date: String
  description: String
  funding_info: String
  funding_logo: String
}

type Pages_enProjects implements Node & Document {
  title: String
  body: JSON
  projects: [Pages_enProjectsProjects]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type Pages_enArticle implements Node & Document {
  title: String
  permalink: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type Pages_enHomeBest_of_collections {
  title: String
  caption: String
  content: [Pages_enHomeBest_of_collectionsContent]
}

type Pages_enHomeBlog {
  title: String
  caption: String
  action: Pages_enHomeBlogAction
}

type Pages_enHomeLatest {
  title: String
  caption: String
  action: Pages_enHomeLatestAction
}

type Pages_enHome implements Node & Document {
  title: String
  body: JSON
  best_of_collections: Pages_enHomeBest_of_collections
  blog: Pages_enHomeBlog
  latest: Pages_enHomeLatest
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type Pages_enDefault implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Pages_en = Pages_enProjects | Pages_enArticle | Pages_enHome | Pages_enDefault

input Pages_enProjectsProjectsFilter {
  title: StringFilter
  project_date: StringFilter
  description: StringFilter
  funding_info: StringFilter
  funding_logo: ImageFilter
}

input Pages_enProjectsFilter {
  title: StringFilter
  body: RichTextFilter
  projects: Pages_enProjectsProjectsFilter
}

input Pages_enArticleFilter {
  title: StringFilter
  permalink: StringFilter
  body: RichTextFilter
}

input Pages_enHomeBest_of_collectionsFilter {
  title: StringFilter
  caption: StringFilter
  content: Pages_enHomeBest_of_collectionsContentFilter
}

input Pages_enHomeBlogFilter {
  title: StringFilter
  caption: StringFilter
  action: Pages_enHomeBlogActionFilter
}

input Pages_enHomeLatestFilter {
  title: StringFilter
  caption: StringFilter
  action: Pages_enHomeLatestActionFilter
}

input Pages_enHomeFilter {
  title: StringFilter
  body: RichTextFilter
  best_of_collections: Pages_enHomeBest_of_collectionsFilter
  blog: Pages_enHomeBlogFilter
  latest: Pages_enHomeLatestFilter
}

input Pages_enDefaultFilter {
  title: StringFilter
}

input Pages_enFilter {
  projects: Pages_enProjectsFilter
  article: Pages_enArticleFilter
  home: Pages_enHomeFilter
  default: Pages_enDefaultFilter
}

type Pages_enConnectionEdges {
  cursor: String!
  node: Pages_en
}

type Pages_enConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Pages_enConnectionEdges]
}

type Settings implements Node & Document {
  latestDate: String
  tax1percent: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input SettingsFilter {
  latestDate: DatetimeFilter
  tax1percent: BooleanFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePhoto_uploads(relativePath: String!, params: Photo_uploadsMutation!): Photo_uploads!
  createPhoto_uploads(relativePath: String!, params: Photo_uploadsMutation!): Photo_uploads!
  updateHetifortepan(relativePath: String!, params: HetifortepanMutation!): Hetifortepan!
  createHetifortepan(relativePath: String!, params: HetifortepanMutation!): Hetifortepan!
  updateNotifications(relativePath: String!, params: NotificationsMutation!): Notifications!
  createNotifications(relativePath: String!, params: NotificationsMutation!): Notifications!
  updatePages_hu(relativePath: String!, params: Pages_huMutation!): Pages_hu!
  createPages_hu(relativePath: String!, params: Pages_huMutation!): Pages_hu!
  updatePages_en(relativePath: String!, params: Pages_enMutation!): Pages_en!
  createPages_en(relativePath: String!, params: Pages_enMutation!): Pages_en!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  photo_uploads: Photo_uploadsMutation
  hetifortepan: HetifortepanMutation
  notifications: NotificationsMutation
  pages_hu: Pages_huMutation
  pages_en: Pages_enMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  photo_uploads: Photo_uploadsMutation
  hetifortepan: HetifortepanMutation
  notifications: NotificationsMutation
  pages_hu: Pages_huMutation
  pages_en: Pages_enMutation
  settings: SettingsMutation
}

input Photo_uploadsUploadsHuActionsMutation {
  best_of: String
  all: String
}

input Photo_uploadsUploadsHuMutation {
  title: String
  blurb: String
  actions: Photo_uploadsUploadsHuActionsMutation
}

input Photo_uploadsUploadsEnActionsMutation {
  best_of: String
  all: String
}

input Photo_uploadsUploadsEnMutation {
  title: String
  blurb: String
  actions: Photo_uploadsUploadsEnActionsMutation
}

input Photo_uploadsUploadsMutation {
  name: String
  date: String
  cover_image: String
  hu: Photo_uploadsUploadsHuMutation
  en: Photo_uploadsUploadsEnMutation
}

input Photo_uploadsMutation {
  uploads: [Photo_uploadsUploadsMutation]
}

input HetifortepanHuMutation {
  date: String
  cover_image: String
  title: String
  excerpt: String
  url: String
}

input HetifortepanEnMutation {
  date: String
  cover_image: String
  title: String
  excerpt: String
  url: String
}

input HetifortepanMutation {
  hu: [HetifortepanHuMutation]
  en: [HetifortepanEnMutation]
}

input NotificationsNotificationsMutation {
  lang: String
  date: String
  title: String
  message: JSON
}

input NotificationsMutation {
  notifications: [NotificationsNotificationsMutation]
}

input Pages_huProjectsProjectsMutation {
  title: String
  project_date: String
  description: String
  funding_info: String
  funding_logo: String
}

input Pages_huProjectsMutation {
  title: String
  body: JSON
  projects: [Pages_huProjectsProjectsMutation]
}

input Pages_huArticleMutation {
  title: String
  permalink: String
  body: JSON
}

input Pages_enHomeBest_of_collectionsContentMutation {
  title: String
  counter: Float
  cover_image: String
  url: String
}

input Pages_huHomeBest_of_collectionsMutation {
  title: String
  caption: String
  content: [Pages_enHomeBest_of_collectionsContentMutation]
}

input Pages_enHomeBlogActionMutation {
  label: String
  url: String
}

input Pages_huHomeBlogMutation {
  title: String
  caption: String
  action: Pages_enHomeBlogActionMutation
}

input Pages_enHomeLatestActionMutation {
  label: String
  url: String
}

input Pages_huHomeLatestMutation {
  title: String
  caption: String
  action: Pages_enHomeLatestActionMutation
}

input Pages_huHomeMutation {
  title: String
  body: JSON
  best_of_collections: Pages_huHomeBest_of_collectionsMutation
  blog: Pages_huHomeBlogMutation
  latest: Pages_huHomeLatestMutation
}

input Pages_huDefaultMutation {
  title: String
}

input Pages_huMutation {
  projects: Pages_huProjectsMutation
  article: Pages_huArticleMutation
  home: Pages_huHomeMutation
  default: Pages_huDefaultMutation
}

input Pages_enProjectsProjectsMutation {
  title: String
  project_date: String
  description: String
  funding_info: String
  funding_logo: String
}

input Pages_enProjectsMutation {
  title: String
  body: JSON
  projects: [Pages_enProjectsProjectsMutation]
}

input Pages_enArticleMutation {
  title: String
  permalink: String
  body: JSON
}

input Pages_enHomeBest_of_collectionsMutation {
  title: String
  caption: String
  content: [Pages_enHomeBest_of_collectionsContentMutation]
}

input Pages_enHomeBlogMutation {
  title: String
  caption: String
  action: Pages_enHomeBlogActionMutation
}

input Pages_enHomeLatestMutation {
  title: String
  caption: String
  action: Pages_enHomeLatestActionMutation
}

input Pages_enHomeMutation {
  title: String
  body: JSON
  best_of_collections: Pages_enHomeBest_of_collectionsMutation
  blog: Pages_enHomeBlogMutation
  latest: Pages_enHomeLatestMutation
}

input Pages_enDefaultMutation {
  title: String
}

input Pages_enMutation {
  projects: Pages_enProjectsMutation
  article: Pages_enArticleMutation
  home: Pages_enHomeMutation
  default: Pages_enDefaultMutation
}

input SettingsMutation {
  latestDate: String
  tax1percent: Boolean
}

schema {
  query: Query
  mutation: Mutation
}
